\ load development code
\ needs l

reset

: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED1 io-mode!  begin  LED1 iox!  100 ms  key? until ;

: tftry tft-init clear TFT-BL ios! demo ;

: pwmtry ( -- )  1 LED2 +pwm 100 LED2 pwm ;

\ -----------------------------------------------------------------------------

: sleep ( -- ) [ $BF30 h, ] inline ;  \ WFI Opcode, enters sleep mode

      PWR $4 + constant PWR-CSR

$E000ED00 constant SCB
     SCB $14 + constant SCB-SCR

: standby ( -- )  \ go into low-power standby mode
  2 bit PWR-CR bis!  \ CWUF
  1 bit PWR-CR bis!  \ PDDS
  2 bit SCB-SCR bis!  \ SLEEPDEEP
  sleep ;

\ TODO not working, not even with OMODE-AF-OD PA0 io-mode!
: ena-wup ( -- )  \ enable wakeup pin
  8 bit PWR-CSR bis! ;

\ -----------------------------------------------------------------------------

: s $FF >spi> h.2 space ;
: ss
  $CD 0            sd-cmd sd-wait s s s s s s s s s s s s s s s s  \ ACMD13
  $49 0            sd-cmd sd-wait s s s s s s s s s s s s s s s s  \ CMD9
;

: sdblk ( sect -- ) sd.buf sd-read drop sd.buf 64 dump ;

: c ( char -- )
  dup $FF = if drop else
    dup 32 < over 126 > or if drop [char] . then emit
  then ;
: e ( off1 off2 -- off1 )
  over + sd.buf + c@ c ;
: l ( off -- )
  1 e 3 e 5 e 7 e 9 e
  14 e 16 e 18 e 20 e 22 e 24 e 28 e 30 e
  ."  #" sd.buf + c@ dup $1F and . $40 and . ;
: f ( off -- )
  dup sd.buf + 8 type [char] . emit dup 8 + sd.buf + 3 type
  ."  at: " 26 + sd.buf + h@ .
;

: sdtry ( -- )
  sd-mount
  sd.root @ sdblk  \ read 1st block of root directory
  512 0 do
    i sd.buf + c@ dup 0<> swap $E5 <> and if
      i 11 + sd.buf + c@ $0F = if
        cr ." LFN: "  i l
      else
        cr ."      " i f
      then
    then
  32 +loop
;

: x ( cluster -- ) sd.buf hex. sd-c>s sdblk ;

\ -----------------------------------------------------------------------------
\ vim: set ft=forth :
