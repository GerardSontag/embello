\ load development code
\ needs l

reset

: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED io-mode!  begin  LED iox!  100 ms  key? until ;

\ print out received packet info until a key is pressed
\ format: #bytes b3..b0 b7..b4 rssi lna afc
: r69try ( -- )
  42 8686 rf-init
  begin
    rf-recv  ?dup if
      cr . rf.buf @ hex. rf.buf 4 + @ hex. rf.rssi @ . rf.lna @ . rf.afc @ .
    then
  key? until ;

: lcdtry ( -- ) lcd-init show-logo  1000 ms  lcd-init demo ;
: rtctry ( -- ) +i2c  0 0 rtc!  begin  0 rtc@ $FF and .  key? until ;
: pwmtry ( -- ) 1 LED +pwm 100 LED pwm ;
: t69try ( n - ) 15 rf-power  0 <# #s #> 0 rf-send ;

\ -----------------------------------------------------------------------------

PA2 constant HEATER-SENSE
PA3 constant POWER-SENSE
PA8 constant TEMP-POWER
PB0 constant TEMP-SENSE
PB3 constant HEATER
PB4 constant BLACK-BTN
PB5 constant WHITE-BTN

: splash ( -- )
  clear
  64 32 58 28 ellipse display
  64 32 60 30 ellipse display
  s" Pico Reflow" 22 20 drawstring display
  s" Controller" 26 30 drawstring display
  s" v0.1" 50 45 drawstring display
;

: vreading ( pin -- value )  \ take an averaged ADC reading
  0  100 0 do over adc + loop  100 / nip ;

 200 variable low-temp   680 variable low-pt100   \ low temp calibration
2600 variable high-temp 1500 variable high-pt100  \ high temp calibration

: read-pt100 ( -- u )  \ read out PT100 sensor
  TEMP-POWER ios!  1 ms  TEMP-SENSE vreading  TEMP-POWER ioc! ;

: temp ( -- u )  \ read PT100 sensor temperature
  read-pt100
  \ convert sensor reading to approximate tenths of degrees C
  \ use linear relationship for now: t = (sens-lp)*(ht-lt)/(hp-lp)+lt
  low-pt100 @ -
  high-temp @ low-temp @ - *
  high-pt100 @ low-pt100 @ - /
  low-temp @ + ;

: sense-to-volt ( pin -- u )  \ read and convert ADC value to Volt (rounded)
  vreading  24 *  140 +  280 / ;
\ power & heater are divided as 100kΩ/10kΩ, so 12V = 140 and 24V = 280 on ADC
: power-volt ( -- u ) POWER-SENSE sense-to-volt ;
: heater-volt ( -- u ) HEATER-SENSE sense-to-volt ;

: power-present? ( -- f ) power-volt 1 >= ;
: power-ok? ( -- f )  \ true if the power supply is between 11 and 25 Volt
  power-volt dup 11 >= swap 25 <= and ;

: heater-ok? ( -- f ) \ true if the heater is present
  \ simple to detect if power is present, else we *could* briefly set the power
  \ sense pin high, and use that to check that the heater sense pin rises a bit
  \ TODO needs to deal with both cases: pwm now on and now off
  false ;

: heater-off ( -- ) 0 HEATER pwm ;
: black? ( -- f ) BLACK-BTN io@ 0= ;
: white? ( -- f ) WHITE-BTN io@ 0= ;

: setup ( -- )
  lcd-init splash
  100 HEATER +pwm  heater-off
   omode-pp TEMP-POWER io-mode!  TEMP-POWER ioc!
  imode-PULL BLACK-BTN io-mode!   BLACK-BTN ios!
  imode-PULL WHITE-BTN io-mode!   WHITE-BTN ios!
  +adc
;

setup

\ -----------------------------------------------------------------------------
\ vim: set ft=forth :
