\ load development code
\ needs l

reset

: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED1 io-mode!  begin  LED1 iox!  100 ms  key? until ;

\ print out received packet info until a key is pressed
\ format: #bytes b3..b0 b7..b4 rssi lna afc
: r69try ( -- )
  42 8686 rf-init
  begin
    rf-recv  ?dup if
      cr . rf.buf @ hex. rf.buf 4 + @ hex. rf.rssi @ . rf.lna @ . rf.afc @ .
    then
  key? until ;

: adctry ( -- )  +adc  begin  PB0 adc .  key? until ;
: uartry ( -- )  +uart uart. ;
: pwmtry ( -- )  1 LED2 +pwm 9900 LED2 pwm ;  \ inverted logic
: t69try ( n - ) 15 rf-power  0 <# #s #> 0 rf-send ;

\ -----------------------------------------------------------------------------

      PWR $4 + constant PWR-CSR

$E000ED00 constant SCB
     SCB $14 + constant SCB-SCR

: standby ( -- )  \ go into low-power standby mode
  2 bit PWR-CR bis!  \ CWUF
  1 bit PWR-CR bis!  \ PDDS
  2 bit SCB-SCR bis!  \ SLEEPDEEP
  sleep ;

\ TODO not working, not even with OMODE-AF-OD PA0 io-mode!
: ena-wup ( -- )  \ enable wakeup pin
  8 bit PWR-CSR bis! ;

\ -----------------------------------------------------------------------------

eint multitask

0 variable seconds
task: timetask

: time& ( -- )
  timetask background
    begin
      key? if boot-task wake then
      1 seconds +!
      seconds @ . cr
      stop
    again
;

\ time& ( lowpower& ) tasks

: tick ( -- )
  ++ticks
  millis 1000 mod 0= if timetask wake then ;

\ ' tick irq-systick !

\ stop \ Idle the boot task
\ -----------------------------------------------------------------------------

PC0 constant PULSE1
PC1 constant PULSE2
PC2 constant PULSE3

: main ( -- )
  lcd-init show-logo
  +adc
  +uart-irq ( uart. )

  imode-pull PULSE1 io-mode!  PULSE1 ios!
  imode-pull PULSE2 io-mode!  PULSE2 ios!
  imode-pull PULSE3 io-mode!  PULSE3 ios!

  begin
    PULSE1 io@  PULSE2 io@ xor  PULSE3 io@ xor
    LED2 io!
  key? until
  LED2 ioc!
;

main

\ -----------------------------------------------------------------------------
\ vim: set ft=forth :
