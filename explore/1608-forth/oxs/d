\ load development code
\ needs l

reset

: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED1 io-mode!  begin  LED1 iox!  100 ms  key? until ;

\ print out received packet info until a key is pressed
\ format: #bytes b3..b0 b7..b4 rssi lna afc
: r69try ( -- )
  42 8686 rf-init
  begin
    rf-recv  ?dup if
      cr . rf.buf @ hex. rf.buf 4 + @ hex. rf.rssi @ . rf.lna @ . rf.afc @ .
    then
  key? until ;

: adctry ( -- )  +adc  begin  PA0 adc .  key? until ;
: uartry ( -- )  +uart uart. ;
: pwmtry ( -- )  1 LED2 +pwm 9900 LED2 pwm ;  \ inverted logic
: t69try ( n - ) 15 rf-power  0 <# #s #> 0 rf-send ;

config-pins

\ -----------------------------------------------------------------------------
\ quad-ADC sampling via DMA

                             4 constant #adcs
                           800 constant #samples
                             2 constant #buffers
#adcs #samples * #buffers * 2* constant #abytes
                        #abytes buffer: adata

    ADC1 $04 + constant ADC1-CR1
    ADC1 $2C + constant ADC1-SQR1

: quad-adc ( -- )
  adata #abytes VAC-IN 2880 adc1-dma
                              \ set up the ADC scan channels:
  VAC-IN adc#                 \ channel 0
  CT1    adc#  5 lshift or    \ channel 1
  CT2    adc# 10 lshift or    \ channel 2
  CT3    adc# 15 lshift or    \ channel 3
              ADC1-SQR3 !
  3 20 lshift ADC1-SQR1 !     \ four scan channels
         8 bit ADC1-CR1 bis!  \ enable SCAN mode
;

    DMA1 $00 + constant DMA1-ISR
    DMA1 $04 + constant DMA1-IFCR

: a micros begin
      begin DMA1-ISR @ until
      micros dup rot - .
      DMA1-ISR @ dup . DMA1-IFCR !
    key? until drop ;

\ -----------------------------------------------------------------------------
\ vim: set ft=forth :
