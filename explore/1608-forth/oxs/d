\ load development code
\ needs l

reset

: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED1 io-mode!  begin  LED1 iox!  100 ms  key? until ;

\ print out received packet info until a key is pressed
\ format: #bytes b3..b0 b7..b4 rssi lna afc
: r69try ( -- )
  42 8686 rf-init
  begin
    rf-recv  ?dup if
      cr . rf.buf @ hex. rf.buf 4 + @ hex. rf.rssi @ . rf.lna @ . rf.afc @ .
    then
  key? until ;

: adctry ( -- )  +adc  begin  PA0 adc .  key? until ;
: uartry ( -- )  +uart uart. ;
: pwmtry ( -- )  1 LED2 +pwm 9900 LED2 pwm ;  \ inverted logic
: t69try ( n - ) 15 rf-power  0 <# #s #> 0 rf-send ;

config-pins
quad-adc
count-pulses

\ -----------------------------------------------------------------------------

    800 constant #capt
#capt 2* buffer: capt

: dma-sync ( -- )  \ synchronise to the ADC half-transfer flag in the DMA unit
  DMA1-ISR @ DMA1-IFCR !
  begin DMA1-ISR @ 2 bit and until  \ wait for half-transfer on channel 0
;

: acapture ( chan -- )  \ sync, copy, and print samples from a separate buffer
  dma-sync
  #capt 0 do i 4 * over + 2* adata + h@ i 2* capt + h! loop
  #capt 0 do i 2* capt + h@ . loop drop ;

\ 0 acapture

\ -----------------------------------------------------------------------------
\ vim: set ft=forth :
