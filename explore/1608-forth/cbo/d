\ load development code
\ needs l

reset

: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED io-mode!
  begin
    LED iox!
    1000000 0 do loop
  key? until ;

: rtctry ( -- )  +i2c  0 0 rtc!  begin  0 rtc@ $FF and .  key? until ;
: adctry ( -- )  +adc  begin  PB0 adc .  key? until ;
: uartry ( -- )  +uart uart. ;

\ -----------------------------------------------------------------------------

$A0000060 constant FSMC-PCR2
\ $A0000064 constant FSMC-SR2
$A0000068 constant FSMC-PMEM2
$A000006C constant FSMC-PATT2
\ $A0000074 constant FSMC-ECCR2

$70000000 constant NAND
$70010000 constant NAND-CMD
$70020000 constant NAND-ADDR

: nand-pins ( -- )
  psram-pins

  OMODE-AF-PP OMODE-FAST + PD7  io-mode!
  OMODE-AF-OD OMODE-FAST + PG6  io-mode!  \ input?
;

: nand-fsmc ( -- )
            0
      3 bit or  \ PTYP = NAND
      1 bit or  \ PWAITEN = enabled
  FSMC-PCR2 !
                 0
     3 24 lshift or  \ MEMHIZ = 4
     1 16 lshift or  \ MEMHOLD = 1
      2 8 lshift or  \ MEMWAIT = 2
\     0 0 lshift or  \ MEMSET = 0
  dup FSMC-PMEM2 !
      FSMC-PATT2 !

  2 bit FSMC-PCR2 bis!  \ PBKEN = enabled
;

: nand-init ( -- )
  nand-pins nand-fsmc ;

: nand-readid ( -- )
  nand-init
  $90 NAND-CMD c!
  $00 NAND-ADDR c!
  NAND c@ hex.
  NAND @ hex. ;

: nand-status ( -- b )
  $90 NAND-CMD c!  NAND c@ ;
: nand-wait ( -- )
  micros begin nand-status 6 bit and 0= until micros swap - . ;

: nand-erase ( page -- )
  $60 NAND-CMD c!  NAND-ADDR h!  $D0 NAND-CMD c!  nand-wait ;

: nand-write ( addr -- )
  $80 NAND-CMD c!  NAND-ADDR !
  100 0 do i NAND c! loop
  $10 NAND-CMD c!  nand-wait ;

: nand-read ( addr -- )
  $00 NAND-CMD c!  NAND-ADDR !  $30 NAND-CMD c!
  30 us
  20 0 do NAND @ hex. loop ;

\ -----------------------------------------------------------------------------

\ vim: set ft=forth :
