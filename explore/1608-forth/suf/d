\ load development code
\ needs l

reset
led ios!

0 variable zero

: ep-setup ( ep -- )
  dup rxclear
  cr ." setup: " $48 $40 do i usb-pma@ h.4 space 2 +loop
  $40 usb-pma@ case
    $0080 of zero 2 send-data endof
    $0680 of send-desc endof
    $2021 of usb:line 7 send-data endof
    true ?of 0 0 send-data endof
  endcase
  ep-reset-rx# send-next
;

: usb-input ( c -- )
  [char] < emit
  dup bl < if h.2 else emit then
  [char] > emit
;

: ep-out ( ep -- )
  dup rxclear
  dup 3 ep-reg h@ $3F and 0 ?do
    i $100 + usb-pma c@ usb-input
  loop
  ep-reset-rx#
;

: ep-in ( ep -- )
  dup txclear
  $40 usb-pma@ $0500 = if $42 usb-pma@ $80 or USB-DADDR h! then
  send-next
;

: usb-ctr ( istr -- )
  dup $07 and swap $10 and if 
    dup ep-addr h@ $800 and if ep-setup else ep-out then
  else ep-in then ;

: usb. ( -- )  \ dump USB info
  cr ." EP0R " 0 ep-addr h@ h.4
    ."  EP1R " 1 ep-addr h@ h.4
    ."  EP2R " 2 ep-addr h@ h.4
    ."  EP3R " 3 ep-addr h@ h.4
  cr ." CNTR " USB-CNTR h@ h.4
    ."  ISTR " USB-ISTR h@ h.4
     ."  FNR " USB-FNR h@ h.4
   ."  DADDR " USB-DADDR h@ h.4
  ."  BTABLE " USB-BTABLE h@ h.4 ;

: usb.mem ( -- )  \ dump packet buffer memory
  $150 0 do
    i $0F and 0= if cr i h.4 space then
    i $7 and 0= if space then
    i shl USBMEM + h@ h.4 space
  2 +loop ;

5000 buffer: outbuf
0 variable outpos

: buf-emit? true ;
: buf-emit outpos @ dup 5000 < if outbuf + c!  1 outpos +!  else drop then ;

: save-to-buf
  ['] buf-emit? hook-emit? !
  ['] buf-emit hook-emit !
  0 outpos ! ;
: restore-buf
  ['] serial-emit? hook-emit? !
  ['] serial-emit hook-emit !
  outbuf outpos @ type  0 outpos ! ;

: test-buf save-to-buf ." abc" [char] : serial-emit restore-buf ;

: poll
  begin
    USB-ISTR h@
    dup $0400 and if usb-reset            $FBFF USB-ISTR h! then
    dup $8000 and if dup usb-ctr          $7FFF USB-ISTR h! then
    dup $0800 and if %1100 USB-CNTR hbis! $F7FF USB-ISTR h! then
    dup $1000 and if %1000 USB-CNTR hbic! $EFFF USB-ISTR h! then
    drop
  key? until ;

: t +usb poll usb. usb.mem -usb ;
: t2 save-to-buf +usb poll usb. usb.mem -usb restore-buf ;

\ vim: set ft=forth :
