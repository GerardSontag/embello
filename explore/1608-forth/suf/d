\ load development code
\ needs l

reset
led io-1!

: usb-clear ( -- )
  1024 0 do  0 i USBMEM + h!  4 +loop ;

: usb-reset ( -- )
  0 USB-BTABLE h!
  0 USB-ISTR h!
  $80 USB-DADDR h!
  usb-init
\  R^rrseekT^ttnnnn
\  5432109876543210
  %1011001010010000 USB-EP0R h!  \ ctrl rx-val tx-stall
  %1000000010100001 USB-EP1R h!  \ bulk rx-dis tx-nak
  %1000011010100010 USB-EP2R h!  \ intr rx-dis tx-nak
  %1011000010000011 USB-EP3R h!  \ bulk rx-val tx-dis
;

: +usb ( -- )  \ init USB hardware
  OMODE-PP PA0 io-mode!  PA0 io-1!  \ usb-off HyTiny
\ OMODE-AF-PP OMODE-FAST + PA11 io-mode!  \ hw_config.c:115
\ OMODE-AF-PP OMODE-FAST + PA12 io-mode!
  23 bit RCC-APB1ENR bis!  \ USBEN hw_config.c:162
  $0001 USB-CNTR h!  \ usb_pwr.c:73
  100 0 do loop
  $0000 USB-CNTR h!  \ usb_pwr.c:77
  usb-clear
  usb-reset
  PA0 io-0!  \ usb-on HyTiny
;

: -usb ( -- )  \ deinit USB hardware
  23 bit RCC-APB1ENR bic!  \ USBEN
  PA0 io-1!  \ usb-off HyTiny
;

: fnr. ( -- )  \ print last seen frame number
  [char] # emit USB-FNR h@ $3FF and h.4 space ;
: setup. ( -- )  \ dump received setup packet
  ." setup: " $90 $80 do i USBMEM + h@ h.4 space 4 +loop ;

' nop variable next-tx

: gd2 0 0 send-desc ; \ ['] nop next-tx ! ;
: gd1 usb:dev 18 send-desc ['] gd2 next-tx ! ;

0 variable zero
0 variable outData
0 variable outLen

: halt ( -- ) usb. usb.mem -usb cr ." HALT" reset ;

: out? ( -- f ) USB-ISTR h@ $10 and 0<> ;

: got-in ( -- )
  ." send#"
  outData @  outLen @ 64 min
  USBMEM $8C + h@ ?dup if min then
  dup . dup >r  send-desc
  r@ outData +! r> negate outLen +! ;

: got-setup ( -- )
  USBMEM $80 + h@
  case
    $0500 of
      0 0 send-desc
      ." sA "
      USBMEM $84 + h@ dup h.2 space $80 or USB-DADDR h!
      usb:dev outData ! 18 outLen !
    endof
    $0680 of
      0 0 send-desc
      ." gD"
      usb:conf outData ! 67 outLen !
\     usb:dev outData ! 18 outLen !
    endof
    ." S?" usb. usb.mem -usb cr begin again \ intentional hang
  endcase ;

: usb-poll ( -- )
  USB-ISTR h@
  dup $8400 and if
    cr istr. fnr.
    USB-EP0R h@ $800 and if
      setup.
      got-setup drop 0
    then
    dup $8000 and if
      %11 rxstat!
    then
  then
  dup $0400 and if ." R " usb-reset drop 0 then
\ dup $0200 and if ." F#" then
  dup $8000 and if
    out? if
      0 0 send-desc
      ." OUT "
    else
      ." IN "
      got-in
    then
    %11 rxstat!
  then
  drop
  0 USB-ISTR h!  \ clear all pending interrupts
;

: cls ( -- )  \ clear screen
  27 emit ." [2J" 27 emit ." [;H" ;

: try ( -- )
  +usb  cr
  2000000 0 do i 50000 mod 0= if [char] . emit then  usb-poll loop
  cr usb.mem usb. -usb ;

try

\ vim: set ft=forth :
