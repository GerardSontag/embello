\ load development code
\ needs l

reset
led io-1!

: usb-clear ( -- )
  1024 0 do  0 i USBMEM + h!  4 +loop ;

: usb-reset ( -- )
  0 USB-BTABLE h!
  0 USB-ISTR h!
  $80 USB-DADDR h!
  usb-init
\  R^rrseekT^ttnnnn
\  5432109876543210
  %1011001010010000 USB-EP0R h!  \ ctrl rx-val tx-stall
  %1000000010100001 USB-EP1R h!  \ bulk rx-dis tx-nak
  %1000011010100010 USB-EP2R h!  \ intr rx-dis tx-nak
  %1011000010000011 USB-EP3R h!  \ bulk rx-val tx-dis
;

: +usb ( -- )  \ init USB hardware
  OMODE-PP PA0 io-mode!  PA0 io-1!  \ usb-off HyTiny
\ OMODE-AF-PP OMODE-FAST + PA11 io-mode!  \ hw_config.c:115
\ OMODE-AF-PP OMODE-FAST + PA12 io-mode!
  23 bit RCC-APB1ENR bis!  \ USBEN hw_config.c:162
  $0001 USB-CNTR h!  \ usb_pwr.c:73
  100 0 do loop
  $0000 USB-CNTR h!  \ usb_pwr.c:77
  usb-clear
  usb-reset
  PA0 io-0!  \ usb-on HyTiny
;

: -usb ( -- )  \ deinit USB hardware
  23 bit RCC-APB1ENR bic!  \ USBEN
  PA0 io-1!  \ usb-off HyTiny
;

' nop variable next-tx

: gd2 0 0 send-desc ; \ ['] nop next-tx ! ;
: gd1 usb:dev 18 send-desc ['] gd2 next-tx ! ;

0 variable zero

: got-xfer ( outf -- )
  >r
  USBMEM $80 + h@
  case
    $0000 of
      r@ if zero 2 send-desc else %01 txstat! then
      %11 rxstat!
      ." Ss" usb. cr
    endof
    $0500 of
      r@ if 0 0 send-desc else %01 txstat! then
      %11 rxstat!
      ." Sa"
      r@ if USBMEM $84 + h@ dup h.2 space $80 or USB-DADDR h! then
      ['] gd1 next-tx !
    endof
    $0680 of
\     next-tx @ execute
      r@ if usb:dev
        18 USBMEM $C + h@ $FF and min dup .
        send-desc
      else %01 txstat! then
      %11 rxstat!
      ." Gd"
    endof
    $0880 of
      ." Gc"
    endof
    ." S?" usb. usb.mem -usb cr begin again \ intentional hang
  endcase r> drop ;

: usb-poll ( -- )
  USB-ISTR h@
  dup $8C00 and if cr istr. then
  dup $0400 and if ." R " usb-reset drop 0 then
\ dup $0200 and if ." F#" then
  dup $8000 and if dup $10 and got-xfer then
  drop
  0 USB-ISTR h!  \ clear all pending interrupts
;

: try ( -- )
  +usb  cr
  2000000 0 do i 50000 mod 0= if [char] . emit then  usb-poll loop
  cr usb.mem usb. -usb ;

\ try

\ vim: set ft=forth :
