\ load development code
\ needs l

reset
led ios!

: +usb ( -- )  \ init USB hardware
  OMODE-PP PA0 io-mode!  PA0 ios!  1 ms  PA0 ioc!
  23 bit RCC-APB1ENR bis!  \ USBEN
  $0001 USB-CNTR h! 10 us $0000 USB-CNTR h!  \ FRES
;

: -usb ( -- )  \ deinit USB hardware
  23 bit RCC-APB1ENR bic!  \ USBEN
  PA0 ios!  \ usb-off HyTiny
;

: ep-reset-rx# ( ep -- ) 8400 swap 8 * 6 + usb-pma! 3 rxstat! ;

: setup. ( -- )  \ dump received setup packet
  ." setup: " $48 $40 do i usb-pma@ h.4 space 2 +loop ;

: ureset ( -- )
  512 0 do  0 i usb-pma!  2 +loop
  0 USB-BTABLE h!
  usb-init
  $3210 USB-EP0R h!
  $0021 USB-EP1R h!
  $0622 USB-EP2R h!
  $3003 USB-EP3R h!
  $80 USB-DADDR h!
;

0 0 2variable pending
0 variable zero
0 variable next-addr

: send-data pending 2! ;
: send-zero ( n -- ) zero swap send-data ;
: send-next ( -- )
  pending 2@ 64 min $46 usb-pma@ min
  ." >" over h.2 ." #" dup .
  >r ( addr R: num )
  r@ even 0 ?do
    dup i + h@ $80 i + usb-pma!
  2 +loop drop
  r@ $02 usb-pma! 3 txstat!
  pending 2@ r> dup negate d+ pending 2!
;

: send-desc ( -- )
  $42 usb-pma@ case
    $0100 of usb:dev     18 endof
    $0200 of usb:conf    67 endof
    $0300 of usb:langid  4  endof
    $0301 of usb:vendor  40 endof
    $0302 of usb:product 36 endof
    $0303 of usb:serial  18 endof
    true ?of 0           0  endof
  endcase send-data ;

: ep-setup ( ep -- )
  rxclear \ 2 txstat! 2 rxstat!
  cr setup.
  $40 usb-pma@ case
    $0080 of 2 send-zero endof
    $0500 of $42 usb-pma@ next-addr ! 0 send-zero endof
    $0680 of send-desc endof
    $0900 of 0 send-zero endof
    $2021 of usb:line 8 send-data endof
    true ?of 0 send-zero endof
  endcase
  0 ep-reset-rx# send-next
;

: ep-out ( ep -- )
  rxclear
  ." :OUT "
  3 rxstat!
;

: ep-in ( ep -- )
  txclear \ 2 txstat!
  next-addr @ ?dup if  $80 or USB-DADDR h!  0 next-addr !  then
  ." :IN "
  0 ep-reset-rx# send-next
;

: uctr ( istr -- )
  dup h.4
  dup $07 and swap $10 and if 
    USB-EP0R h@ $800 and if ep-setup else ep-out then
  else ep-in then ;

: ususp ( -- ) %1100 USB-CNTR hbis! ;
: uwkup ( -- ) %1000 USB-CNTR hbic! ;

: poll
  begin
    USB-ISTR h@
    dup $9C00 and if [char] ! emit then
    dup $0400 and if [char] R emit ureset   $FBFF USB-ISTR h! then
    dup $8000 and if [char] C emit dup uctr $7FFF USB-ISTR h! then
    dup $0800 and if [char] S emit ususp    $F7FF USB-ISTR h! then
    dup $1000 and if [char] W emit uwkup    $EFFF USB-ISTR h! then
    drop
  key? until ;

: t +usb poll usb. usb.mem -usb ;
: t2 save-to-buf +usb poll usb. usb.mem -usb restore-buf ;

\ vim: set ft=forth :
