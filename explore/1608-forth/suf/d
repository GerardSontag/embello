\ load development code
\ needs l

reset
led ios!

: +usb ( -- )  \ init USB hardware
  OMODE-PP PA0 io-mode!  PA0 ios!  1 ms  PA0 ioc!
  23 bit RCC-APB1ENR bis!  \ USBEN hw_config.c:162
  $0001 USB-CNTR h!  \ FRES
  $0000 USB-CNTR h!
;

: -usb ( -- )  \ deinit USB hardware
  23 bit RCC-APB1ENR bic!  \ USBEN
  PA0 ios!  \ usb-off HyTiny
;

: usb-pma ( pos -- addr ) dup 1 and negate swap 2* + USBMEM + ;
: usb-pma@ ( pos -- u ) usb-pma h@ ;
: usb-pma! ( u pos -- ) usb-pma h! ;

\ : ep-reset-rx# ( ep -- ) 8400 swap 8 * 6 + usb-pma! ;
: ep0-reset-rx# ( -- ) 8400 $06 usb-pma! 3 rxstat! ;

: fnr. ( -- )  \ print last seen frame number
  [char] # emit USB-FNR h@ $3FF and h.4 space ;
: setup. ( -- )  \ dump received setup packet
  ." setup: " $48 $40 do i usb-pma@ h.4 space 2 +loop ;

: ureset ( -- )
  512 0 do  0 i usb-pma!  2 +loop
  0 USB-BTABLE h!
  usb-init
  $3210 USB-EP0R h!
  $0021 USB-EP1R h!
  $0622 USB-EP2R h!
  $3003 USB-EP3R h!
  $80 USB-DADDR h!
;

0 0 2variable pending
0 variable zero
0 variable next-addr

: send-data pending 2! ;
: send-zero ( n -- ) zero swap send-data ;
: send-next ( -- )
  pending 2@ 64 min $46 usb-pma@ min
  ." >" over h.2 ." #" dup .
  >r ( addr R: num )
  r@ 0 ?do
    dup i + h@ $80 i + usb-pma!
  2 +loop drop
  r@ $02 usb-pma! 3 txstat!
  pending 2@ r> dup negate d+ pending 2!
;

create usb:line
     $00 c, $C2 c,
     $01 c, $00 c,
     $01 c, $00 c,
     $08 c, $00 c,

: send-str ( -- )
  $42 usb-pma@ case
    $0100 of usb:dev 18 endof
    $0200 of usb:conf 67 endof
    $0300 of usb:langid 4 endof
    $0301 of usb:vendor 16 endof
    $0302 of usb:product 40 endof
    $0303 of usb:serial 18 endof
    true ?of 0 0 endof
  endcase send-data ;

: ep0-setup
  cr setup.
  0 rxclear 2 txstat! 2 rxstat!
  $40 usb-pma@ case
    $0080 of 2 send-zero endof
    $0500 of $42 usb-pma@ next-addr ! 0 send-zero endof
    $0680 of send-str endof
    $0900 of 0 send-zero endof
    $2021 of usb:line 8 send-data endof
    true ?of 0 send-zero endof
  endcase
  ep0-reset-rx# send-next
;

: ep-set-address ( ep -- )
  dup cells USB-EP0R + tuck h@ $0F00 and $8080 or or swap h! ;

: ep0-in
  0 txclear
  ." :EP0-IN "
  next-addr @ ?dup if
    dup $80 or USB-DADDR h!
    ." ADDR=" h.2 space
    4 1 do i ep-set-address loop
    0 next-addr !
  then
\ 64 $46 usb-pma!
  ep0-reset-rx# send-next
;

: ep0-out
\ s" abc" send-data
  ." :EP0-OUT "
  USB-ISTR h@ 7 and rxclear
  3 rxstat!
;

: uctr ( istr -- )
  dup h.4 $10 and if 
    USB-EP0R h@ $800 and if ep0-setup else ep0-out then
  else ep0-in then ;

: ususp ( -- ) %1100 USB-CNTR hbis! ;
: uwkup ( -- ) %1000 USB-CNTR hbic! ;

: poll
  begin
    USB-ISTR h@
    dup $9C00 and if [char] ! emit then
    dup $0400 and if [char] R emit ureset   $FBFF USB-ISTR h! then
    dup $8000 and if [char] C emit dup uctr $7FFF USB-ISTR h! then
    dup $0800 and if [char] S emit ususp    $F7FF USB-ISTR h! then
    dup $1000 and if [char] W emit uwkup    $EFFF USB-ISTR h! then
    drop
  key? until ;

: t +usb poll usb. usb.mem -usb ;
: t2 save-to-buf +usb poll usb. usb.mem -usb restore-buf ;

\ vim: set ft=forth :
