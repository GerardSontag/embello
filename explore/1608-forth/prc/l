\ install library packages in flash
\ needs h
\ includes d

( cornerstone ) <<<hal-prc>>>
compiletoflash

( code-start, see code-size below ) here

include ../flib/rf69.fs
include ../flib/oled.fs
\ include ../flib/tft-ili9325.fs
include ../mlib/graphics.fs
include ../mlib/multi.fs

\ -----------------------------------------------------------------------------
\ Pico Reflow Controller, startup code

PA2 constant HEATER-SENSE
PA3 constant POWER-SENSE
PA8 constant TEMP-POWER
PB0 constant TEMP-SENSE
PB1 constant HEATER-PWM
PB2 constant BUZZER-OUT
PB4 constant BLACK-BTN
PB5 constant WHITE-BTN

: splash ( -- )
  clear
  64 32 58 28 ellipse
  64 32 60 30 ellipse
  s" Pico Reflow" 21 20 drawstring
  s" Controller" 25 30 drawstring
  s" v0.1" 48 47 drawstring
  20 42 108 42 line
  display
;

: vreading ( pin -- value )  \ take an averaged ADC reading
  0  100 0 do over adc + loop  100 / nip ;

 200 variable low-temp   680 variable low-pt100   \ low temp calibration
2600 variable high-temp 1200 variable high-pt100  \ high temp calibration

: read-pt100 ( -- u )  \ read out PT100 sensor
  TEMP-POWER ios!  1 ms  TEMP-SENSE vreading  TEMP-POWER ioc! ;

: temp ( -- u )  \ read PT100 sensor temperature
  read-pt100
  \ convert sensor reading to approximate tenths of degrees C
  \ use linear relationship for now: t = (sens-lp)*(ht-lt)/(hp-lp)+lt
  low-pt100 @ -
  high-temp @ low-temp @ - *
  high-pt100 @ low-pt100 @ - /
  low-temp @ + ;

\ power and heater dividers are 100kΩ/10kΩ, so 12V = 1350 and 24V = 2700 on ADC
: sense-to-volt ( pin -- u )  \ read and convert ADC value to Volt (rounded)
  ( dup adc drop 1 ms ) vreading  24 *  1400 +  2800 / ;
: power-volt ( -- u ) POWER-SENSE sense-to-volt ;
: heater-volt ( -- u ) HEATER-SENSE sense-to-volt ;

: power? ( -- f )  \ true if the heater's power supply is present
  power-volt 7 > ;
: power-ok? ( -- f )  \ true if the power supply is between 11 and 27 Volt
  power-volt dup 11 >= swap 27 <= and ;

: heater? ( -- f ) \ true if the heater has been detected
  \ easy to detect if power is present, else power will be around 3.7V from
  \ being back-fed through the 7805 and zener - this can still detect a heater
  \ deal with both cases: pwm currently on or off
  heater-volt power-volt
  \ connected if within 1V of either the power voltage or ground
  over - 1 <=  swap 1 <= or ;

: heat! ( n -- )  \ heater control: 0 = off, 10 = 80%
  -10 + 800 * HEATER-PWM pwm ;

: black? ( -- f ) BLACK-BTN io@ 0= ;
: white? ( -- f ) WHITE-BTN io@ 0= ;

: meas ( -- )  \ measure and show all readings
   ." T: " temp .
  ." ok? " power-ok? 1 and . cr
   ." P: " power-volt .
   ." P? " power? 1 and . cr
   ." H: " heater-volt .
   ." H? " heater? 1 and . cr
   ." B: " black? 1 and .
   ." W: " white? 1 and . cr ;

: lcd-emit ( c -- )
  dup $0A = if drop
    s"                 "  \ dumb way to clear a line
    0 dup font-x !  font-y @  8 +  $38 and  dup font-y !
    drawstring
    0 font-x !
  else
    ascii>bitpattern drawcharacterbitmap
  then ;

: lcd-meas
  clear  0 font-x !  0 font-y !
  ['] lcd-emit hook-emit !
  meas
  ['] serial-emit hook-emit !
  display ;

: config-pins ( -- )
  imode-adc HEATER-SENSE io-mode!  HEATER-SENSE ioc!
   imode-adc POWER-SENSE io-mode!   POWER-SENSE ioc!
    imode-adc TEMP-SENSE io-mode!    TEMP-SENSE ioc!
     omode-pp TEMP-POWER io-mode!    TEMP-POWER ioc!
     omode-pp BUZZER-OUT io-mode!    BUZZER-OUT ioc!
    imode-PULL BLACK-BTN io-mode!     BLACK-BTN ios!
    imode-PULL WHITE-BTN io-mode!     WHITE-BTN ios! ;

: main ( -- )
  +adc  10 HEATER-PWM +pwm  0 heat!  config-pins

  black? if exit then       \ if black pressed on init, bail out
  lcd-init splash 3000 ms   \ else: splash screen, then start report loops
  key? if exit then         \ if key pressed on init, bail out

  begin                     \ start OLED-based reporting
    black? 10 and heat!     \ now black button enables heater
    lcd-meas  100 ms
  white? until              \ stop the loop when white is pressed
  clear display  0 heat!    \ also turn off the heat, just in case

  begin                     \ start serial-based reporting
    cr meas  500 ms
  key? until                \ stop the loop when any key is pressed
;

\ -----------------------------------------------------------------------------

( code-size ) here swap - .
cornerstone <<<lib-prc>>>
( flash-end ) here hex.
include d
\ vim: set ft=forth :
