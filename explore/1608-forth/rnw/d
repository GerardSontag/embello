\ load development code
\ needs l

reset

: digtry ( -- )
  lcd-init 1234 shownum ;

: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED io-mode!  begin  LED iox!  100 ms  key? until ;

\ print out received packet info until a key is pressed
\ format: #bytes b3..b0 b7..b4 rssi lna afc
: rftry ( -- )
  42 8686 rf-init
  begin
    rf-recv  ?dup if
      cr . rf.buf @ hex. rf.buf 4 + @ hex. rf.rssi @ . rf.lna @ . rf.afc @ .
    then
  key? until ;

: tftry ( -- ) lcd-init show-logo  1000 ms  lcd-init demo ;
\ : tftry ( -- ) tft-init demo ;

: rtctry ( -- )  +i2c  0 0 rtc!  begin  0 rtc@ $FF and .  key? until ;
: adctry ( -- )  +adc  begin  PB0 adc .  key? until ;
: uartry ( -- )  +uart uart. ;
: pwmtry ( -- )  1 LED +pwm 100 LED pwm ;

: txtry ( n - ) 15 rf-power  0 <# #s #> 0 rf-send ;

\ -----------------------------------------------------------------------------

: freq-gen ( freq duty pin -- freq )  \ frequency with duty cycle 10/20/../90%
\ freq range is 110 Hz .. 7.2 MHz, but steps can be very coarse above 100 KHz
\ better dividers could be used, but this should be usable in the audio range
  >r ( freq duty R: pin ) 1 r@ +pwm       \ first set up basic pwm
  9 r@ p2tim timer-base TIM.ARR + !       \ reload value is 9, i.e. cycle 10
  10 / 10 swap - r@ pwm                   \ use 1..9, for use with PWM cycle 10
  7200000 dup rot /                       \ find best divider (may be too low)
  dup 1- r> p2tim timer-base TIM.PSC + !  \ set pre-scaler accordingly
  /                                       \ return actual freq (may be higher)
;

\ 1000 30 PA1 freq-gen .

\ -----------------------------------------------------------------------------
\ rf12 trial

PA10 constant RF12-IRQ

create crc16-table
hex
  $0000 h, $CC01 h, $D801 h, $1400 h, $F001 h, $3C00 h, $2800 h, $E401 h,
  $A001 h, $6C00 h, $7800 h, $B401 h, $5000 h, $9C01 h, $8801 h, $4400 h,
decimal

: crc16@ ( u -- u ) $F and shl crc16-table + h@ ;
: crc16h ( crc u -- crc ) crc16@ swap dup crc16@ swap 4 rshift xor xor ;

: crc16 ( b crc -- crc )  \ update CRC16 with given byte
  over crc16h swap 4 rshift crc16h ;

: >rf12> ( u -- u )  \ 16-bit SPI using two 8-bit SPI exchanges
  +spi dup 8 rshift >spi> 8 lshift swap >spi> or -spi ;
: >rf12 ( u -- ) >rf12> drop ;
: rf12-fifo> ( -- u) $B000 >rf12> $FF and ;

' nop variable rf12.reset
' nop variable rf12.state
    5 variable rf12.grp
    0 variable rf12.len
    0 variable rf12.pos
    0 variable rf12.crc
    72 buffer: rf12.rx

1 4 lshift constant rf12-433MHz
2 4 lshift constant rf12-868MHz
3 4 lshift constant rf12-915MHz

: showrx ( -- )
  rf12.crc @ 0= if
    ." RF12 "
    rf12.len @ 2- 0 ?do
      i 4 = if space then
      rf12.rx i + c@ h.2
    loop
    cr
  then ;

: rf12>rx ( b -- )
  dup rf12.crc @ crc16 rf12.crc !
      rf12.pos @ rf12.rx + c!
    1 rf12.pos +!
  rf12.pos @ rf12.len @ >= if
    showrx rf12.reset @ execute
  then ;

: rf12/recv ( -- ) rf12-fifo> rf12>rx ;

: rf12/len ( -- )
  rf12-fifo> dup 66 <= if
    dup rf12>rx  6 + rf12.len !  \ grp hdr len <data> crc1 crc2
    ['] rf12/recv
  else
    ( cr ."  ? #" . ) rf12.reset @
  then rf12.state ! ;

: rf12/hdr ( -- )
  1 rf12.rx c+!  \ increment headers-seen count
  rf12-fifo> rf12>rx
  ['] rf12/len rf12.state ! ;

: rf12-go ( -- )
         $8205 >rf12  \ sleep mode
             1 rf12.pos !
             5 rf12.len !
         $FFFF rf12.crc !
    rf12.grp @ rf12>rx
  ['] rf12/hdr rf12.state !
             0 >rf12
         $B000 >rf12
         $82DD >rf12  \ receiver on
;

: rf12-recv ( -- )
  ['] rf12-go dup rf12.reset ! execute
  begin
\   RF12-IRQ io@ 0= if 0 >rf12 rf12.state @ execute then
    0 >rf12> $8000 and if rf12.state @ execute then
  key? until ;

: rf12-init ( grp freq -- )  \ initialise the RFM12B radio module
  case 915 of $30 endof 868 of $20 endof true ?of $10 endof endcase
  swap dup rf12.grp !  ( band group )

  IMODE-PULL RF12-IRQ io-mode!  RF12-IRQ ios!  \ IRQ pin is input w/ pull-up
  spi-init spi. 1 ms  \ FIXME init hangs without repeated calls, no idea why
  spi-init spi. 1 ms
  spi-init spi. 1 ms cr
\ slow down, 9 MHz SPI is too fast for the RFM12B
\ %0000000001010100 SPI1-CR1 !  \ clk/8, i.e. 9 MHz, master
  %0000000001100100 SPI1-CR1 !  \ clk/32, i.e. 2.25 MHz, master

  0 >rf12  $B800 >rf12  begin 0 >rf12  RF12-IRQ io@ until  0 rf12.rx !

    $8205 >rf12  \ sleep mode
  $CE00 + >rf12  \ group, SYNC=2DXX；
  $80C7 + >rf12  \ band, EL (ena TX), EF (ena RX FIFO), 12.0pF
    $A640 >rf12  \ 96-3960 freq range within band, use default 1600
    $C606 >rf12  \ approx 49.2 Kbps, i.e. 10000/29/(1+6) Kbps
    $94A2 >rf12  \ VDI,FAST,134kHz,0dBm,-91dBm
    $C2AC >rf12  \ AL,!ml,DIG,DQD4
    $CA83 >rf12  \ FIFO8,2-SYNC,!ff,DR
    $C483 >rf12  \ @PWR,NO RSTRIC,!st,!fi,OE,EN
    $9850 >rf12  \ !mp,90kHz,MAX OUT
    $CC77 >rf12  \ OB1，OB0, LPX,！ddy，DDIT，BW0
    $E000 >rf12  \ NOT USE
    $C800 >rf12  \ NOT USE
    $C049 >rf12  \ 1.66MHz,3.1V
;

: r 5 868 rf12-init rf12-recv ;

PA15 ssel !  \ for base board w/ HyTiny

\ -----------------------------------------------------------------------------
\ vim: set ft=forth :
