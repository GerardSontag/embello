\ load development code
\ needs l

reset

: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED io-mode!
  begin
    LED iox!
    1000000 0 do loop
  key? until ;

\ print out received packet info until a key is pressed
\ format: #bytes b3..b0 b7..b4 rssi lna afc
: rftry ( -- )
  8686 rf-init
  begin
    rf-recv  ?dup if
      cr . rf.buf @ hex. rf.buf 4 + @ hex. rf.rssi @ . rf.lna @ . rf.afc @ .
    then
  key? until ;

: lcdtry ( -- )
  lcd-init show-logo
  2000000 0 do loop
  lcd-init demo
;

: rtctry ( -- )  i2c-init  0 0 rtc!  begin  0 rtc@ $FF and .  key? until ;

: adctry init-adc  ( 1 Âµs ) 10 0 do loop  begin  PB0 adc .  key? until ;

  : ledon led io-0! ;
  : ledoff led io-1! ;
  : busy ( u -- ) 100 * 0 ?do loop ;
  : %pwm ( pct -- )
    begin
      ledon  dup busy
      ledoff  100 over - busy
    key? until ;

  30 %pwm

  \ lcdtry
  \ rftry  \ must be last, continues to run until keypress
  \ vim: set ft=forth :
