#!/bin/sh

version=0.3
# 0.3 new "config" and "install" commands
# 0.2 new "flash" command
# 0.1 initial version

usage () {
    cat <<EOF
JeeLabs Embello Toolkit $version

Usage:
  jet info
  jet flash firmware.bin
  jet config [option]
  jet install [option]

EOF
}

arm_gcc_version () {
    set - $(arm-none-eabi-gcc -v 2>&1 | grep 'gcc version')
    echo $3
}

arm_gdb_version () {
    set - "" $(arm-none-eabi-gdb -v 2>/dev/null | head -1)
    eval echo \${$#} # http://stackoverflow.com/questions/1853946
}

go_lang_version () {
    set - $(go version 2>&1 | grep 'go version')
    echo ${3#go}
}

jetx_version () {
    set - $(jetx -v 2>/dev/null)
    echo $3
}

lpc_isp_version () {
    set - $(lpc21isp 2>/dev/null | grep '^Version ')
    echo $2
}

which_nodejs () {
    # no output, leaves $nodejs variable set to "node" or "nodejs"
    case $nodejs in "")
        # disambiguation: pick "nodejs" over "node", if both are present
        nodejs=$(basename "$(which nodejs node | head -1)")
        : ${nodejs:=nodejs}
    esac
}

nodejs_version () {
    which_nodejs
    set - $($nodejs -v 2>/dev/null)
    echo ${1#v}
}

npm_js_version () {
    npm -v 2>/dev/null
}

st_link_version () {
    # can't determine version, return number of exe's present, should be 4
    set - $(which st-flash st-info st-term st-util | wc -l)
    echo ${1#0}
}

error_msg () {
    echo error: "$*" 1>&2
    exit 1
}

has_whiptail () {
    which whiptail >/dev/null
}

ask () {
    has_whiptail && whiptail "$@" 3>&1 1>&2 2>&3
}

do_info () {
    which_nodejs
    fnode=$(printf %6s $nodejs)
    cat <<EOF
Installed versions:

        os: $(uname -srm)
   arm-gcc: $(arm_gcc_version)
   arm-gdb: $(arm_gdb_version)
   go-lang: $(go_lang_version)
       jet: $version
      jetx: $(jetx_version)
    $fnode: $(nodejs_version)
  lpc21isp: $(lpc_isp_version)

EOF
    # this is too slow:
    #npm: $(npm_js_version)
    # not used yet:
    #st-link: $(st_link_version)
}

disable_serial () {
    # set inittab entry to "once" so that we still have a console on next boot
    # but then we also need to immediately get rid of that once-only process
    # this logic doesn't interfere with raspi-config's commenting/uncommenting
    if [ -c /dev/ttyAMA0 ]; then
        sudo sed -i /etc/inittab -e '/ ttyAMA0 /s/:respawn:/:once:/'
        sudo kill -1 1
        sleep 1
        set - `ps -t ttyAMA0`
        if [ "$5" != "" ]; then
            sudo kill $5
        fi
        echo The serial console is no longer active.
    else
        echo Serial login is not supported on this platform.
    fi
}

enable_serial () {
    if [ -c /dev/ttyAMA0 ]; then
        sudo sed -i /etc/inittab -e '/ ttyAMA0 /s/:once:/:respawn:/'
        sudo kill -1 1
        sleep 1
        set - `ps -t ttyAMA0`
        if [ "$5" != "" ]; then
            echo The serial console is active.
        fi
    else
        echo Serial login is not supported on this platform.
    fi
}

sudo_echo () {
    # can't use "sudo echo $1 >$2" because op permission problems
    echo $1 | sudo tee $2 >/dev/null
}

setup_gpio () {
    # usage: setup_gpio <pin> <in/out> ?value?
    if [ ! -d /sys/class/gpio/gpio$1/ ]; then
        sudo_echo $1 /sys/class/gpio/export
    fi
    case $2 in
        in|out) sudo_echo $2 /sys/class/gpio/gpio$1/direction ;;
        *)      sudo_echo $1 /sys/class/gpio/unexport; return ;;
    esac
    sudo chmod a+w /sys/class/gpio/gpio$1/value
    case "$2-$3" in out-?*)
        set_gpio $1 $3
    esac
}

set_gpio () {
    # usage: set_gpio <pin> <value>
    echo $2 >/sys/class/gpio/gpio$1/value
}

prepare_uploads () {
    if [ -f /sys/class/gpio/export ]; then
        setup_gpio 4 out 1
        setup_gpio 17 out 1
    else
        echo Reset is not supported on this platform.
    fi
}

upload_or_reset () {
    # force an upload if arg is non-empty, else just reset
    if [ -f /sys/class/gpio/export ]; then
        prepare_uploads
        if [ "$1" != "" ]; then
            set_gpio 4 0
        fi
        set_gpio 17 0
        sleep 0.1
        set_gpio 17 1
        sleep 0.1
        set_gpio 4 1
    else
        echo Reset is not supported on this platform.
    fi
}

do_config () {
    case ${1:-$(ask --menu "JET - Configuration options" 11 60 3 \
        d "Disable serial console login" \
        e "Enable serial console login" \
        r "Reset attached serial board" \
    )} in
        d) disable_serial ;;
        e) enable_serial ;;
        r) upload_or_reset ;;
    esac
}

install_arm () {
    case `uname -s` in
        Linux)
            sudo apt-get install gcc-arm-none-eabi gdb-arm-none-eabi
            ;;
        Darwin)
            brew tap PX4/homebrew-px4
            brew update
            brew install gcc-arm-none-eabi-49
            ;;
    esac
}

install_go () {
    case `uname -s` in
        Linux)  echo NOT YET ;;
        Darwin) brew install go ;;
    esac
}

install_jetx () {
    echo NOT YET
}

install_lpc () {
    case `uname -s` in
        Linux)  sudo apt-get install lpc21isp ;;
        Darwin) brew install lpc21isp ;;
    esac
}

install_node () {
    case `uname -s` in
        Linux)  echo NOT YET ;;
        Darwin) brew install node ;;
    esac
}

do_install () {
    case ${1:-$(ask --menu "JET - Installation options" 13 60 5 \
        a "Install gcc/g++/gdb ARM cross-compiler" \
        g "Install the 'go' compiler" \
        j "Install the 'jetx' extension" \
        l "Install the 'lpc21isp' uploader" \
        n "Install the 'node.js' runtime" \
    )} in
        a) echo install_arm ;;
        g) echo install_go ;;
        j) echo install_jetx ;;
        l) echo install_lpc ;;
        n) echo install_node ;;
    esac
}

case $1 in
    "")         usage ;;
    info)       do_info ;;
    flash)      shift; jetx upload "$@" ;;
    config)     do_config $2 ;;
    install)    do_install $2 ;;
    *)          error_msg unknown command: $1 ;;
esac

# vim: set ft=dash :
